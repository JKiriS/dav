#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import TSSLSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from rec import Rec
from rec.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print('')
  print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] function [arg1 [arg2...]]')
  print('')
  print('Functions:')
  print('  Result updateRList(string uid)')
  print('  Result updateDic(i32 batch_size, i32 skip)')
  print('  Result updateTfIdf(i32 batch_size)')
  print('  Result updateModel(i32 batch_size, i32 num_topics)')
  print('  Result lsiSearch(string query, i32 start, i32 length)')
  print('  Result updateUPre(string uid)')
  print('')
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
  ssl = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSSLSocket.TSSLSocket(host, port, validate=False) if ssl else TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = Rec.Client(protocol)
transport.open()

if cmd == 'updateRList':
  if len(args) != 1:
    print('updateRList requires 1 args')
    sys.exit(1)
  pp.pprint(client.updateRList(args[0],))

elif cmd == 'updateDic':
  if len(args) != 2:
    print('updateDic requires 2 args')
    sys.exit(1)
  pp.pprint(client.updateDic(eval(args[0]),eval(args[1]),))

elif cmd == 'updateTfIdf':
  if len(args) != 1:
    print('updateTfIdf requires 1 args')
    sys.exit(1)
  pp.pprint(client.updateTfIdf(eval(args[0]),))

elif cmd == 'updateModel':
  if len(args) != 2:
    print('updateModel requires 2 args')
    sys.exit(1)
  pp.pprint(client.updateModel(eval(args[0]),eval(args[1]),))

elif cmd == 'lsiSearch':
  if len(args) != 3:
    print('lsiSearch requires 3 args')
    sys.exit(1)
  pp.pprint(client.lsiSearch(args[0],eval(args[1]),eval(args[2]),))

elif cmd == 'updateUPre':
  if len(args) != 1:
    print('updateUPre requires 1 args')
    sys.exit(1)
  pp.pprint(client.updateUPre(args[0],))

else:
  print('Unrecognized method %s' % cmd)
  sys.exit(1)

transport.close()
